type User {
  id: ID!
  firebaseID: String!
  firstName: String!
  lastName: String
  email: String!
  wordGoal: Int!
  createdAt: String!
  updatedAt: String!
}

type Entry {
  id: ID!
  User: User!
  wordCount: Int!
  content: String!
  createdAt: String!
  updatedAt: String!
}

type Editor {
  id: ID!
  User: User!
  showToolbar: Boolean!
  showPrompt: Boolean!
  showCounter: Boolean!
  createdAt: String!
  updatedAt: String!
}

type Query {
  user(firebaseID: String): User!
  editors(ID: ID): [Editor!]!
  entries(ID: ID): [Entry!]!
  latestEntry(userID: ID!): Entry!
}

input NewUser {
  firebaseID: String!
  firstName: String!
  lastName: String
  email: String!
}

input NewEntry {
  userId: String!
  wordCount: Int!
  content: String!
}

input ExistingEntry {
  userID: String!
  wordCount: Int!
  content: String!
}

input NewEditor {
  userId: String!
  showToolbar: Boolean!
  showPrompt: Boolean!
  showCounter: Boolean!
}

type Mutation {
  createUser(input: NewUser!): User!
  createEntry(input: NewEntry!): Entry!
  updateEntry(id: ID!, input: ExistingEntry!): Entry!
  createEditor(input: NewEditor!): Editor!
}